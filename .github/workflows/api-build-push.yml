name: Build and Push API Image

on:
  push:
    branches:
      - master
    paths:
      - 'api/**'
      - '.github/workflows/api-build-push.yml'

# Añadir permisos necesarios para autenticación OIDC con Azure
permissions:
  id-token: write
  contents: read

env:
  IMAGE_NAME: pgcopydb-api
  ACR_REGISTRY: ${{ secrets.ACR_REGISTRY }}
  HELM_CHART_PATH: ./helm/pgcopydb-api
  RELEASE_NAME: pgcopydb-api
  NAMESPACE: pgcopydb

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  deploy-to-aks:
    needs: build-and-push
    runs-on: ubuntu-latest
    # Solo ejecutar el deploy en la rama master
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      
      - name: Azure login with federated credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Set up kubeconfig from AKS
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
          
      - name: Deploy to AKS with Helm
        run: |
          # Asegurarse de que el namespace existe
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Actualizar o instalar el chart
          helm upgrade --install ${{ env.RELEASE_NAME }} ${{ env.HELM_CHART_PATH }} \
            --namespace ${{ env.NAMESPACE }} \
            --set image.repository=${{ env.ACR_REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=latest \
            --wait --timeout 5m
      
      - name: Verify deployment
        run: |
          kubectl get deployments -n ${{ env.NAMESPACE }}
          kubectl get pods -n ${{ env.NAMESPACE }} -l app.kubernetes.io/name=${{ env.RELEASE_NAME }}
